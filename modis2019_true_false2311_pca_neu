/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var forest_mix = ee.FeatureCollection("projects/ee-charly/assets/forest_mix_true_verified2311"),
    shrub = ee.FeatureCollection("projects/ee-charly/assets/shrub_true_verified2311"),
    w_savannah = ee.FeatureCollection("projects/ee-charly/assets/w_savannah_true_verified2311"),
    savannah = ee.FeatureCollection("projects/ee-charly/assets/savannah_true_verified2311"),
    grassland = ee.FeatureCollection("projects/ee-charly/assets/grassland_true_verified2311"),
    wetland = ee.FeatureCollection("projects/ee-charly/assets/wetland_true_verified2311"),
    cropland = ee.FeatureCollection("projects/ee-charly/assets/cropland_true_verified2311"),
    built = ee.FeatureCollection("projects/ee-charly/assets/built_true_verified2311"),
    snow_ice = ee.FeatureCollection("projects/ee-charly/assets/snow_ice_true_verified2311"),
    barren = ee.FeatureCollection("projects/ee-charly/assets/barren_true_verified2311"),
    water = ee.FeatureCollection("projects/ee-charly/assets/water_true_verified2311"),
    AZE_west = ee.FeatureCollection("projects/ee-charly/assets/AZE_west"),
    AZE_districts = ee.FeatureCollection("projects/ee-gonzalodazagarcia/assets/AZE_districts");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var lulc = ee.ImageCollection("MODIS/006/MCD12Q1")
            .filterDate('2019-01-01', '2020-01-01');

var lulc = ee.Image('MODIS/006/MCD12Q1/2019_01_01').select('LC_Type1').clip(AZE_districts);

print(lulc);

Map.centerObject(AZE_districts, 7);

// var sample = lulc.stratifiedSample({
//   numPoints: 500, 
//   classBand: "LC_Type1", 
//   region: AZE, 
//   scale: 500,
//   geometries: true
// });

// print(sample.aggregate_histogram('LC_Type1'))



var LandCoverVis = {
  min: 1.0,
  max: 17.0,
  palette: [
    '05450a', '086a10', '54a708', '78d203', '009900', 'c6b044', 'dcd159',
    'dade48', 'fbff13', 'b6ff05', '27ff87', 'c24f44', 'a5a5a5', 'ff6d4c',
    '69fff8', 'f9ffa4', '1c0dff'
  ],
};

Map.addLayer(lulc, LandCoverVis, 'Land Cover');
// Map.addLayer(sample)

//Export.table.toDrive({collection: sample, description: 'shapefile2002', fileFormat: 'SHP'})



/////////////////////////////////// Lan 7 2014 ////////////////////////////////////
function addNDVI(input) {
  var ndvi = input.normalizedDifference(['SR_B5', 'SR_B4']).rename('ndvi');
  
  return input.addBands(ndvi);
}


//// Add NDVI

var img2019 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
.filterBounds(AZE_districts)
.filterDate ('2019-01-01', '2020-01-01')
.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6'])
.filterMetadata("CLOUD_COVER", "less_than", 10)
.map(addNDVI)
.median()
.clip(AZE_districts);


var visParams8 = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 7390,
  max: 21817,
  gamma: 1.4,
};

Map.addLayer(img2019, {bands: ['SR_B4', 'SR_B3', 'SR_B2']},'landsat2019');
Map.addLayer(img2019, visParams8,'landsat2019Stretch');



var dem = ee.Image("CGIAR/SRTM90_V4");
// .filterBounds(AZE)
// .filterDate('2019-01-01', '2020-01-01')
// .select('Elevation')
// .rename ('elev')
var imgStack = img2019.addBands(dem);
// .clip(AZE)


// var addBands = function 

// imgStack =img2019.map(dem);
// // clip(AZE);

 print(imgStack);

Map.addLayer(imgStack, {bands: ['SR_B4', 'SR_B3', 'SR_B2']},'imgStack');

// Prepairing imagery for PCA


// PCA Code
var getPrincipalComponents = function(centered, scale, region) {
  // Collapse the bands of the image into a 1D array per pixel.
  var arrays = centered.toArray();
  print('PCA applying on', centered);
  // Compute the covariance of the bands within the region.
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: region,
    scale: scale,
    maxPixels: 1e9
  });

  // Get the 'array' covariance result and cast to an array.
  // This represents the band-to-band covariance within the region.
  var covarArray = ee.Array(covar.get('array'));

  // Perform an eigen analysis and slice apart the values and vectors.
  var eigens = covarArray.eigen();

  // This is a P-length vector of Eigenvalues.
  var eigenValues = eigens.slice(1, 0, 1);
  // This is a PxP matrix with eigenvectors in rows.
  var eigenVectors = eigens.slice(1, 1);
  
  // Convert the array image to 2D arrays for matrix computations.
  var arrayImage = arrays.toArray(1);
  
  // Left multiply the image array by the matrix of eigenvectors.
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

  // Turn the square roots of the Eigenvalues into a P-band image.
  var sdImage = ee.Image(eigenValues.sqrt())
    .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

  // Turn the PCs into a P-band image, normalized by SD.
  return principalComponents
    // Throw out an an unneeded dimension, [[]] -> [].
    .arrayProject([0])
    // Make the one band array image a multi-band image, [] -> image.
    .arrayFlatten([getNewBandNames('pc')])
    // Normalize the PCs by their SDs.
    .divide(sdImage);
};





// var elev = ee.Image("CGIAR/SRTM90_V4").rename('elev');
// var slope = ee.Terrain.slope('elev').divide(30).rename('slope');

// var img2019 = img2019.addBands(elev).addBands(slope);



///////////////////////////////// Classification /////////////////////////////////////////
//////////// select bands of image for prediction
  
var bands = ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5'];//, 'SR_B6'];

  var class_palette = [
    '009900', //// Mixed Forest, 1
    'c6b044', //  Shrubland, 2
    'dade48', // Woody Savannah, 3
    'fbff13', // Savannas, 4
    'b6ff05', // Grasslands, 5
    '27ff87', // Wetlands, 6
    'c24f44', /// Croplands, 7
    'a5a5a5', /// Urban Built up, 8
    '69fff8', /// Snow Ice, 9
    'f9ffa4', // Barren, 10
    '1c0dff'// Water Bodies, 11
  ];


////// Merge Training Samples to Feature Collection // check on property of traiing samples

var classNames = forest_mix.merge(shrub).merge(w_savannah)
.merge(savannah).merge(grassland).merge(wetland).merge(cropland).merge(built).merge(snow_ice)
.merge(barren).merge(water);




//************************************************************************** 
// Function to calculate Principal Components
// Code adapted from https://developers.google.com/earth-engine/guides/arrays_eigen_analysis
//************************************************************************** 
var getPrincipalComponents = function(centered, scale, region) {
  // Collapse the bands of the image into a 1D array per pixel.
  var arrays = centered.toArray();

  // Compute the covariance of the bands within the region.
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: AZE_districts,
    scale: scale,
    maxPixels: 1e9
  });

  // Get the 'array' covariance result and cast to an array.
  // This represents the band-to-band covariance within the region.
  var covarArray = ee.Array(covar.get('array'));

  // Perform an eigen analysis and slice apart the values and vectors.
  var eigens = covarArray.eigen();

  // This is a P-length vector of Eigenvalues.
  var eigenValues = eigens.slice(1, 0, 1);
  // This is a PxP matrix with eigenvectors in rows.
  var eigenVectors = eigens.slice(1, 1);

  // Convert the array image to 2D arrays for matrix computations.
  var arrayImage = arrays.toArray(1);

  // Left multiply the image array by the matrix of eigenvectors.
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

  // Turn the square roots of the Eigenvalues into a P-band image.
  var sdImage = ee.Image(eigenValues.sqrt())
      .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

  // Turn the PCs into a P-band image, normalized by SD.
  return principalComponents
      // Throw out an an unneeded dimension, [[]] -> [].
      .arrayProject([0])
      // Make the one band array image a multi-band image, [] -> image.
      .arrayFlatten([getNewBandNames('pc')])
      // Normalize the PCs by their SDs.
      .divide(sdImage);
};






// As you see from the printed results, ~97% of the variance
// from the original image is captured in the first 3 principal components
// We select those and discard others
//var pca = PCA(imgStack).select(['pc1', 'pc2', 'pc3'])

// Add the 3 PCA bands to the original image
// Use this image for sampling training points for
// supervised classification
//var composite = imgStack.addBands(pca)  


// // PCA computation is expensive and can time out when displaying on the map
// // Export the results and import them back
// Export.image.toAsset({
//   image: pca,
//   description: 'Principal_Components_Image',
//   assetId: 'users/ujavalgandhi/e2e/arkavathy_pca',
//   region: boundary,
//   scale: 20,
//   maxPixels: 1e10})
// Once the export finishes, import the asset and display
var pcaVisParams = {bands: ['pc1', 'pc2', 'pc3'], min: -2, max: 2};

//Map.addLayer(principalComponents, pcaVisParams, 'Principal Components');




//   /// Training Data
  
//   var points = composite.select(bands).sampleRegions({
//     collection : classNames,
//     properties : ['LC'], // property of geometry
//     scale: 30
//   }).randomColumn();
  
  
//   print (points);
  
 
//   //Randomly split the samples to set some aside for testing the model's accuracy
// //using the "random" column. Roughly 80% for training, 20% for testing.
// var split = 0.8;
// var training = points.filter(ee.Filter.lt('random', split)); // Filter to metadata le
// //ss than the given value.

// var testing = points.filter(ee.Filter.gte('random', split)); // Filter on metadata greater than or equal to the given value.

// //Print these variables to see how much training and testing data you are using
// print('Samples n =', points.aggregate_count('.all'));
// print('Training n =', training.aggregate_count('.all'));
// print('Testing n = ', testing.aggregate_count('.all'));



//   ////////// Train Classifier


//   var classifier = ee.Classifier.smileRandomForest(300,3).train ({
//     features : training,
//     classProperty: 'LC', 
//     inputProperties : bands
//   });



//   /////// Run classification
  
//   var classified = imgStack.select(bands).classify(classifier);
  
//   print(classified.getInfo());
//   //// classification visualisation parameters 
  
 
// Map.addLayer(classified,{ palette: class_palette, min:0, max:11}, 'Land  Classification_2019_RF');
//   //Print Confusion Matrix and Overall Accuracy
// var confusionMatrix = classifier.confusionMatrix();
// print('Confusion matrix: ', confusionMatrix);
// print('Training Overall Accuracy: ', confusionMatrix.accuracy());
// var kappa = confusionMatrix.kappa();
// print('Training Kappa', kappa);
 
// var validation = testing.classify(classifier);
// var testAccuracy = validation.errorMatrix('LC', 'classification');
// print('Validation Error Matrix RF: ', testAccuracy);
// print('Validation Overall Accuracy RF: ', testAccuracy.accuracy());
// var kappa1 = testAccuracy.kappa();
// print('Validation Kappa', kappa1); // values of .6 or higher mean substantial agreement

// //Apply the trained classifier to the image
// var classified = imgStack.select(bands).classify(classifier);



// //////// Pepper Salt Effect
// var pps = classified.connectedPixelCount();    
// var ppss = classified.updateMask(classified.gte(16));






////////// LEGEND /////////////////////////

//Set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
//Create legend title
var legendTitle = ui.Label({
  value: 'Classification Legend',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
//Add the title to the panel
legend.add(legendTitle);
 
//Create and style 1 row of the legend.
var makeRow = function(color, name) {
 
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
      
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//Identify palette with the legend colors
var palette =['009900', 'c6b044','dade48', 'fbff13', 'b6ff05', '27ff87','c24f44','a5a5a5', '69fff8', 'f9ffa4', '1c0dff' ];
 
 
//Identify names within the legend
var names = ['Mixed Forest','Shrubland', 'Woody Savannah', 'Savannahs', 'Grassland', 'Wetlands', 'Cropland', 'Built', 'Snow_Ice', 'Barren', 'Water'];


//Add color and names
for (var i = 0; i < 11; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  

//Add legend to map
Map.add(legend);